import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation





#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#-----------------------ВНИМАНИЕ ЭТО ВАЖНО  !!!  ----------------------------------
#_____________________ПРОЧТИ ПЕРЕД ЗАПУСКОМ  !!!  ---------------------------------



''' Эта программа создает картинку фрактала в gif формате,
эта картинка - множество мандельброта, которое является одним из самых известных фракталов, 
в том числе за пределами математики, благодаря своим цветным визуализациям. 
Его фрагменты не строго подобны исходному множеству, 
но при многократном увеличении определённые части всё больше похожи друг на друга.

Для создания этой gifки моему компьютеру понадобилось около 4 минут,
поэтому будьте терпеливы. И лучше открывать получившуюся gifку в стороннем приложении, 
не в PyCharme. 

Приятного просмотра.

PS.При запуске возникает предупреждение не влияющее на конечный результат.
        
'''

def mandelbrot(x, y, threshold):
    """Вычисляет, принадлежит ли число c = x + i*y множеству
Мандельброта. Чтобы принадлежать, последовательность z[i + 1] = z[i]**2 + c
не должна расходиться после «порогового» числа шагов. Последовательность расходится,
если абсолютное значение z[i+1] больше 4.

:param float x: компонент x исходного комплексного числа
:param float y: компонент y исходного комплексного числа
:param int threshold: количество итераций, при котором она считается сходящейся
    """

    c = complex(x, y)
    z = complex(0, 0)

    for i in range(threshold):
        z = z ** 2 + c
        if abs(z) > 4.:  # он расходился
            return i

    return threshold - 1  # он не расходился

x_start, y_start = -2, -1.5  # интересный регион начинается здесь
width, height = 3, 3  # на 3 единицы вверх и вправо
density_per_unit = 250  # сколько пикселей на единицу

# действительная и мнимая ось
re = np.linspace(x_start, x_start + width, width * density_per_unit)
im = np.linspace(y_start, y_start + height, height * density_per_unit)

fig = plt.figure(figsize=(10, 10))  # создаем фигуру для рисования
ax = plt.axes()  # создаем объект оси


def animate(i):
    ax.clear()  # очистить объект осей
    ax.set_xticks([], [])  # очистить деления оси x
    ax.set_yticks([], [])  # очистить деления оси Y

    X = np.empty((len(re), len(im)))  # повторно инициализируйте образ, похожий на массив
    threshold = round(1.15 ** (i + 1))  # рассчитать текущий порог
    # итерации для текущего порога
    for i in range(len(re)):
        for j in range(len(im)):
            X[i, j] = mandelbrot(re[i], im[j], threshold)

    # связать цвета с итерациями с помощью интерполяции
    img = ax.imshow(X.T, interpolation="bicubic", cmap='magma')
    return [img]


anim = animation.FuncAnimation(fig, animate, frames=45, interval=120, blit=True)
anim.save('mandelbrot.gif', writer='imagemagick')